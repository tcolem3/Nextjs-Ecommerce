"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postgres-array";
exports.ids = ["vendor-chunks/postgres-array"];
exports.modules = {

/***/ "(rsc)/./node_modules/postgres-array/index.js":
/*!**********************************************!*\
  !*** ./node_modules/postgres-array/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nexports.parse = function (source, transform) {\n  return parsePostgresArray(source, transform)\n}\n\nfunction parsePostgresArray (source, transform, nested = false) {\n  let character = ''\n  let quote = false\n  let position = 0\n  let dimension = 0\n  const entries = []\n  let recorded = ''\n\n  const newEntry = function (includeEmpty) {\n    let entry = recorded\n\n    if (entry.length > 0 || includeEmpty) {\n      if (entry === 'NULL' && !includeEmpty) {\n        entry = null\n      }\n\n      if (entry !== null && transform) {\n        entry = transform(entry)\n      }\n\n      entries.push(entry)\n      recorded = ''\n    }\n  }\n\n  if (source[0] === '[') {\n    while (position < source.length) {\n      const char = source[position++]\n\n      if (char === '=') { break }\n    }\n  }\n\n  while (position < source.length) {\n    let escaped = false\n    character = source[position++]\n\n    if (character === '\\\\') {\n      character = source[position++]\n      escaped = true\n    }\n\n    if (character === '{' && !quote) {\n      dimension++\n\n      if (dimension > 1) {\n        const parser = parsePostgresArray(source.substr(position - 1), transform, true)\n\n        entries.push(parser.entries)\n        position += parser.position - 2\n      }\n    } else if (character === '}' && !quote) {\n      dimension--\n\n      if (!dimension) {\n        newEntry()\n\n        if (nested) {\n          return {\n            entries,\n            position\n          }\n        }\n      }\n    } else if (character === '\"' && !escaped) {\n      if (quote) {\n        newEntry(true)\n      }\n\n      quote = !quote\n    } else if (character === ',' && !quote) {\n      newEntry()\n    } else {\n      recorded += character\n    }\n  }\n\n  if (dimension !== 0) {\n    throw new Error('array dimension not balanced')\n  }\n\n  return entries\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMtYXJyYXkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHlCQUF5QjtBQUMvQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY29sZXBcXERlc2t0b3BcXGdpdFxcTmV4dGpzLUVjb21tZXJjZVxcbm9kZV9tb2R1bGVzXFxwb3N0Z3Jlcy1hcnJheVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc291cmNlLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHBhcnNlUG9zdGdyZXNBcnJheShzb3VyY2UsIHRyYW5zZm9ybSlcbn1cblxuZnVuY3Rpb24gcGFyc2VQb3N0Z3Jlc0FycmF5IChzb3VyY2UsIHRyYW5zZm9ybSwgbmVzdGVkID0gZmFsc2UpIHtcbiAgbGV0IGNoYXJhY3RlciA9ICcnXG4gIGxldCBxdW90ZSA9IGZhbHNlXG4gIGxldCBwb3NpdGlvbiA9IDBcbiAgbGV0IGRpbWVuc2lvbiA9IDBcbiAgY29uc3QgZW50cmllcyA9IFtdXG4gIGxldCByZWNvcmRlZCA9ICcnXG5cbiAgY29uc3QgbmV3RW50cnkgPSBmdW5jdGlvbiAoaW5jbHVkZUVtcHR5KSB7XG4gICAgbGV0IGVudHJ5ID0gcmVjb3JkZWRcblxuICAgIGlmIChlbnRyeS5sZW5ndGggPiAwIHx8IGluY2x1ZGVFbXB0eSkge1xuICAgICAgaWYgKGVudHJ5ID09PSAnTlVMTCcgJiYgIWluY2x1ZGVFbXB0eSkge1xuICAgICAgICBlbnRyeSA9IG51bGxcbiAgICAgIH1cblxuICAgICAgaWYgKGVudHJ5ICE9PSBudWxsICYmIHRyYW5zZm9ybSkge1xuICAgICAgICBlbnRyeSA9IHRyYW5zZm9ybShlbnRyeSlcbiAgICAgIH1cblxuICAgICAgZW50cmllcy5wdXNoKGVudHJ5KVxuICAgICAgcmVjb3JkZWQgPSAnJ1xuICAgIH1cbiAgfVxuXG4gIGlmIChzb3VyY2VbMF0gPT09ICdbJykge1xuICAgIHdoaWxlIChwb3NpdGlvbiA8IHNvdXJjZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNoYXIgPSBzb3VyY2VbcG9zaXRpb24rK11cblxuICAgICAgaWYgKGNoYXIgPT09ICc9JykgeyBicmVhayB9XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKHBvc2l0aW9uIDwgc291cmNlLmxlbmd0aCkge1xuICAgIGxldCBlc2NhcGVkID0gZmFsc2VcbiAgICBjaGFyYWN0ZXIgPSBzb3VyY2VbcG9zaXRpb24rK11cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09ICdcXFxcJykge1xuICAgICAgY2hhcmFjdGVyID0gc291cmNlW3Bvc2l0aW9uKytdXG4gICAgICBlc2NhcGVkID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09ICd7JyAmJiAhcXVvdGUpIHtcbiAgICAgIGRpbWVuc2lvbisrXG5cbiAgICAgIGlmIChkaW1lbnNpb24gPiAxKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IHBhcnNlUG9zdGdyZXNBcnJheShzb3VyY2Uuc3Vic3RyKHBvc2l0aW9uIC0gMSksIHRyYW5zZm9ybSwgdHJ1ZSlcblxuICAgICAgICBlbnRyaWVzLnB1c2gocGFyc2VyLmVudHJpZXMpXG4gICAgICAgIHBvc2l0aW9uICs9IHBhcnNlci5wb3NpdGlvbiAtIDJcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gJ30nICYmICFxdW90ZSkge1xuICAgICAgZGltZW5zaW9uLS1cblxuICAgICAgaWYgKCFkaW1lbnNpb24pIHtcbiAgICAgICAgbmV3RW50cnkoKVxuXG4gICAgICAgIGlmIChuZXN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW50cmllcyxcbiAgICAgICAgICAgIHBvc2l0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09ICdcIicgJiYgIWVzY2FwZWQpIHtcbiAgICAgIGlmIChxdW90ZSkge1xuICAgICAgICBuZXdFbnRyeSh0cnVlKVxuICAgICAgfVxuXG4gICAgICBxdW90ZSA9ICFxdW90ZVxuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSAnLCcgJiYgIXF1b3RlKSB7XG4gICAgICBuZXdFbnRyeSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY29yZGVkICs9IGNoYXJhY3RlclxuICAgIH1cbiAgfVxuXG4gIGlmIChkaW1lbnNpb24gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2FycmF5IGRpbWVuc2lvbiBub3QgYmFsYW5jZWQnKVxuICB9XG5cbiAgcmV0dXJuIGVudHJpZXNcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres-array/index.js\n");

/***/ })

};
;